
=== Table Triggers

ifndef::pro[]
SymmetricDS captures synchronization data using database triggers. SymmetricDS' Triggers are defined in the TRIGGER table. 
Each record is used by SymmetricDS when generating database triggers. Database triggers are only generated when a trigger 
is associated with a ROUTER whose source_node_group_id matches the node group id of the current node.

When determining whether a data change has occurred or not, by default the triggers will record a change even if the data was 
updated to the same value(s) they were originally. For example, a data change will be captured if an update of one column 
in a row updated the value to the same value it already was. There is a global property, 
trigger.update.capture.changed.data.only.enabled (false by default), that allows you to override this behavior. 
When set to true, SymmetricDS will only capture a change if the data has truly changed (i.e., when the new column data is not equal to the old column data).
endif::pro[]

ifdef::pro[]
The next step in defining the synchronization scenario is to define which tables should be synchronized.  The simplest
way to do this is by using the *Auto Create...* button on the Configure -> Table Triggers screen.  The Auto Create functionality
introspects the master node's database and looks for available tables to synchronize.  

Note that you will be configuring tables to synchronize for specific <<Routers>>.  You will get a chance to select tables for each configured Router.  Select the channel you desire from the dropdown, 
select the tables that should be synchronized using that channel, and then click the *Next* 
button.  A summary will be presented at the end of the configuration.  Click *Finish* to create the triggers.  

The Auto Create functionality can be used repeatedly to select different table, router and channel combinations.  If you are configuring a new set of tables triggers that should use an independent 
Trigger definition be sure to enter values for either the _Trigger Prefix_ or the _Trigger Suffix_ fields.  These will be used to create a unique _Trigger Id_.   

image::triggers/triggers-auto-create.png[]

For each table selected in the Auto Create wizard, a corresponding Table Trigger configuration element will be added that can be
maintained within the Table Triggers list screen.  New Table Trigger configuration elements can also be created manually from this
screen.

image::trigger.png[]

endif::pro[]

ifdef::pro[]
.Required Fields
endif::pro[]

Trigger Id:: Unique identifier for a trigger.
Source Catalog:: Optional name for the catalog the configured table is in.  If the name includes * then a wildcard match on the table name will be attempted.  \
Wildcard names can include a list of names that are comma separated.  The ! symbol may be used to indicate a NOT match condition.
Parameter values can be substituted using `$(name)` syntax.  See <<Variables>>.
Source Schema:: Optional name for the schema a configured table is in.  If the name includes * then a wildcard match on the table name will be attempted.  
Wildcard names can include a list of names that are comma separated.  The ! symbol may be used to indicate a NOT match condition.
Parameter values can be substituted using `$(name)` syntax.  See <<Variables>>.
Source Table:: The name of the source table that will have a trigger installed to watch for data changes.  See <<Trigger Wildcards>> for using wildcards
to specify multiple source tables.
Parameter values can be substituted using `$(name)` syntax.  See <<Variables>>.
Channel:: The channel_id of the channel that data changes will flow through.

ifdef::pro[]
.Advanced Options
endif::pro[]

Sync On Insert:: Determines if changes will be captured for inserts.
Sync On Update:: Determines if changes will be captured for updates.
Sync On Delete:: Determines if changes will be captured for deletes.
Reload Channel Id:: The channel_id of the channel that will be used for initial loads.
Sync On Insert Condition:: Specify a condition for the insert trigger firing using an expression specific to the database.   On most platforms, it is added to an "IF" statement in the trigger text.  On SQL-Server it is added to the "WHERE" clause of a query for inserted/deleted logical tables. See Sync Condition Example.
Sync On Update Condition:: Specify a condition for the update trigger firing using an expression specific to the database.   On most platforms, it is added to an "IF" statement in the trigger text.  On SQL-Server it is added to the "WHERE" clause of a query for inserted/deleted logical tables. See Sync Condition Example.
Sync On Delete Condition:: Specify a condition for the delete trigger firing using an expression specific to the database.   On most platforms, it is added to an "IF" statement in the trigger text.  On SQL-Server it is added to the "WHERE" clause of a query for inserted/deleted logical tables. See Sync Condition Example.
Sync Condition Example:: Sync Conditions can access both old values and new values of a field/column using "old_" and "new_" respectively. For example, if your column is id and your condition checks the value coming in to be 'test', your condition will be:
+
----
 new_id = 'test'   
----

Custom Insert Trigger Text:: Specify insert trigger text (SQL) to execute after the SymmetricDS trigger fires.  This field is not applicable for H2, HSQLDB 1.x or Apache Derby.
Custom Update Trigger Text:: Specify update trigger text (SQL) to execute after the SymmetricDS trigger fires.  This field is not applicable for H2, HSQLDB 1.x or Apache Derby.
Custom Delete Trigger Text:: Specify delete trigger text (SQL) to execute after the SymmetricDS trigger fires.  This field is not applicable for H2, HSQLDB 1.x or Apache Derby.
Sync On Incoming:: Whether or not an incoming batch that loads data into this table should cause the triggers to capture changes. Changes are never sent back to the source node, but enabling this setting makes it possible to create a never-ending loop through intermediary nodes, such as A to B to C to A.
Capture Row As LOB:: For Oracle, Tibero, and DB2, row data that exceeds the character limit needs converted into a large object (LOB) for capture.  Oracle and Tibero have a character limit of 4000, while DB2 has a character limit of 32767.  The trigger will try to automatically capture the row correctly, so only enable this setting if you are getting truncation errors during trigger creation or when changing data. 
Stream LOBs:: Captures an empty placeholder for large object (LOB) data types when a row is changed, then queries for the LOB value later when the batch is extracted.  If normal capturing of LOBs is not working, enabling this setting may work instead.  When very large LOB data is involved, this setting can reduce the overhead of making changes in the database, but it usually results in worse performance of synchronization since it queries each row during extraction.  
Stream Row:: Captures only the primary key values when the trigger fires, which can reduce overhead for tables with wide data or many columns.  The data will be queried using the PK values when the batch is extracted.  This results in worse performance of synchronization, but it can be used when triggers for all columns won't install or when contention from triggers is too high.
Capture Old Data:: Indicates whether this trigger should capture and send the old data, which is the previous state of the row before the change.
Enable this option if you need to access old data in custom trigger text, routing expression, or transform expression.  Otherwise, disable this option for better performance. 
Handle Key Updates:: For SQL-Server and Sybase, enable this setting to capture changes to the primary key.  The trigger needs to do some additional work to handle changes to the primary key, so this setting is normally disabled. 
External Select:: Specify a SQL select statement that returns a single row, single column result.  
It will be used in the generated database trigger to populate the EXTERNAL_DATA field on the data table.  See 
Excluded Column Names:: Specify a comma-delimited list of columns that should not be synchronized from this table.  
Included Column Names:: Specify a comma-delimited list of columns only should be synchronized from this table.  
Sync Key Names:: Specify a comma-delimited list of columns that should be used as the key for synchronization operations.  By default, if not specified, then the primary key of the table will be used.
Channel Expression:: An expression that will be used to capture the channel id in the trigger.  This expression will only be used if the channel_id is set to 'dynamic'.  The variable "$(schemaName)" can be used, which is replaced with the source schema of the table.  See <<Variables>>.

.Sample Triggers
====
ifndef::pro[]
[source,sql]
----
insert into SYM_TRIGGER (trigger_id, source_table_name,
          channel_id, last_update_time, create_time)
		  values ('item', 'item', 'item', current_timestamp, current_timestamp); 
----
endif::pro[]
ifdef::pro[]
image::triggers/triggers-examples.png[]
endif::pro[]
====

.Trigger Tips and Tricks

.Multiple Triggers On A Table
IMPORTANT: Note that many databases allow for multiple triggers of the same type to be defined. Each database defines the order in which the triggers fire differently. 
If you have additional triggers beyond those SymmetricDS installs on your table, please consult your database documentation to determine if 
there will be issues with the ordering of the triggers.

ifdef::pro[]
.Quick Config Wizard
TIP: Use the <<Quick Config Wizard>> to setup a complete synchronization scenario with default trigger settings.

.Auto Create Triggers
TIP: By using the "Auto Create" button the on the "Table Triggers" screen you can create all your triggers through a single dialog.
endif::pro[]

[TIP]
.Capture Changed Data
====
When determining whether a data change has occurred or not, by default the triggers will record a change even if the data was 
updated to the same value(s) they were originally. For example, a data change will be captured if an update of one column 
in a row updated the value to the same value it already was. There is a global property that allows you to override this behavior (defaults to false).
----
trigger.update.capture.changed.data.only.enabled=false
----
This property is currently only supported on MySQL, DB2, SQL Server, and Oracle.
====

include::table-triggers/wildcards.ad[]
include::table-triggers/external-select.ad[]
include::table-triggers/load-only.ad[]