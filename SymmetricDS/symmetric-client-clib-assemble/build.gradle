
//-----INIT-----//
def csv_loc
def curl_loc
def zip_loc
def sqlite_loc
def cunit_loc
def csv_header_loc
def curl_header_loc
def sqlite_header_loc
def cunit_header_loc
def zip_header_loc

if (target_platform=="windows32" || target_platform=="windows64") {
    csv_loc = csv_loc_windows
    curl_loc = curl_loc_windows
    zip_loc = zip_loc_windows
    sqlite_loc = sqlite_loc_windows
    cunit_loc = cunit_loc_windows
    csv_header_loc = csv_header_loc_windows
    curl_header_loc = curl_header_loc_windows
    sqlite_header_loc = sqlite_header_loc_windows
    cunit_header_loc = cunit_header_loc_windows
    zip_header_loc = zip_header_loc_windows
} else if (target_platform=="osx32" || target_platform=="osx64") {
    csv_loc = csv_loc_mac
    curl_loc = curl_loc_mac
    zip_loc = zip_loc_mac
    sqlite_loc = sqlite_loc_mac
    cunit_loc = cunit_loc_mac
    csv_header_loc = csv_header_loc_mac
    curl_header_loc = curl_header_loc_mac
    sqlite_header_loc = sqlite_header_loc_mac
    cunit_header_loc = cunit_header_loc_mac
    zip_header_loc = zip_header_loc_mac
} else if (target_platform=="linux32" || target_platform=="linux64" || target_platform=="linuxArm") {
    csv_loc = csv_loc_linux
    curl_loc = curl_loc_linux
    zip_loc = zip_loc_linux
    sqlite_loc = sqlite_loc_linux
    cunit_loc = cunit_loc_linux
    csv_header_loc = csv_header_loc_linux
    curl_header_loc = curl_header_loc_linux
    sqlite_header_loc = sqlite_header_loc_linux
    cunit_header_loc = cunit_header_loc_linux
    zip_header_loc = zip_header_loc_linux
} else {
    throw new GradleException('No valid input for \'target_platform\'.')
}
    
def majorMinorVersion = version.substring(0, version.indexOf(".", version.indexOf(".")+ 1))
    
repositories { mavenCentral() }
configurations { sshAntTask }
dependencies { sshAntTask 'org.apache.ant:ant-jsch:1.9.2' }

ant.taskdef (
    name: 'scp',
    classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
    classpath: configurations.sshAntTask.asPath
)
    
    //-----BUILD-----//
subprojects {
	model {
        buildTypes {
            debug
            release
        }
        platforms {
            osx32 {
                architecture "x86"
                operatingSystem "osx"
            }
            osx64 {
                architecture "x86-64"
                operatingSystem "osx"
            }
            linux32 {
                architecture "x86"
                operatingSystem "linux"
            }
            linux64 {
                architecture "x86-64"
                operatingSystem "linux"
            }
            linuxArm {
                architecture "arm"
                operatingSystem "linux"
            }
            windows32 {
                architecture "x86"
                operatingSystem "windows"
            }
            windows64 {
                architecture "x86-64"
                operatingSystem "windows"
            }
        }
        toolChains {
            gcc(Gcc) {
                if (target_platform=="windows32" || target_platform=="windows64") {
                    path gcc_loc_windows
                    eachPlatform {
                        cCompiler.withArguments { args ->
                            args << "-D SYM_WIN32"
                        }
                    }
                }
            }
            clang(Clang)
        }
    }
    model {
        repositories {
            libs(PrebuiltLibraries) {
                csv {
                    if (csv_header_loc!="") {
                        headers.srcDir "${csv_header_loc}"
                    }
                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("${csv_loc}/libcsv.a")
                    }
                    binaries.withType(SharedLibraryBinary) {
                        if (targetPlatform.operatingSystem.macOsX) {
                            sharedLibraryFile = file("${csv_loc}/libcsv.dylib")
                        } else {
                            sharedLibraryFile = file("${csv_loc}/libcsv.so")
                        }
                    }
                }
                curl {
                    if (curl_header_loc!="") {
                        headers.srcDir "${curl_header_loc}"
                    }
                    binaries.withType(SharedLibraryBinary) {
                        if (targetPlatform.operatingSystem.windows) {
                            sharedLibraryFile = file("${curl_loc}/libcurl.dll")
                        } else if (targetPlatform.operatingSystem.macOsX) {
                            sharedLibraryFile = file("${curl_loc}/libcurl.dylib")
                        } else {
                            sharedLibraryFile = file("${curl_loc}/libcurl.so")
                        }
                    }
                }
                zip {
                    if (zip_header_loc!="") {
                        headers.srcDir "${zip_header_loc}"
                    }
                    binaries.withType(SharedLibraryBinary) {
                        if (targetPlatform.operatingSystem.windows) {
                            sharedLibraryFile = file("${zip_loc}/libzip.dll")
                        } else if (targetPlatform.operatingSystem.macOsX) {
                            sharedLibraryFile = file("${zip_loc}/libzip.dylib")
                        } else {
                            sharedLibraryFile = file("${zip_loc}/libzip.so")
                        }
                    }
                }                
				sqlite {
                    if (sqlite_header_loc!="") {
                        headers.srcDir "${sqlite_header_loc}"
                    }
                    binaries.withType(StaticLibraryBinary) {
                    	staticLibraryFile = file("${sqlite_loc}/libsqlite3.a")
                    }
                    binaries.withType(SharedLibraryBinary) {
                        if (targetPlatform.operatingSystem.windows) {
                            sharedLibraryFile = file("${sqlite_loc}/libsqlite3-0.dll")
                        } else if (targetPlatform.operatingSystem.macOsX) {
                            sharedLibraryFile = file("${sqlite_loc}/libsqlite3.dylib")
                        } else {
                            sharedLibraryFile = file("${sqlite_loc}/libsqlite3.so")

                        }
                    }
                }
				cunit {
                    if (cunit_header_loc!="") {
                        headers.srcDir "${cunit_header_loc}"
                    }
                    binaries.withType(StaticLibraryBinary) {
                        staticLibraryFile = file("${cunit_loc}/libcunit.a")
                    }
                    binaries.withType(SharedLibraryBinary) {
                        if (targetPlatform.operatingSystem.macOsX) {
                            sharedLibraryFile = file("${cunit_loc}/libcunit.dylib")
                        } else {
                            sharedLibraryFile = file("${cunit_loc}/libcunit.so")
                        }
                    }
                }
                wsock {
                    binaries.withType(SharedLibraryBinary) {
                        if (targetPlatform.operatingSystem.windows) {
                            sharedLibraryFile = file("${wsock_loc_windows}/wsock32.dll")
                        }
                    }
                }
            }
		}
	}
}

project(":symmetric-client-clib") {
    apply plugin: 'c'
    model {
        components {
            sym(NativeLibrarySpec) {
                targetPlatform target_platform
                sources {
                    c {
                        source {
                            srcDir "src"
                            include "**/*.c"
                        }
                        exportedHeaders {
                            if (target_platform=="windows32" || target_platform=="windows64") {
                                srcDirs = [libgen_header_loc_windows,
                                           'inc']
                            } else {
                                srcDir "inc"
                            }
                        }
                        if (target_platform=="windows32" || target_platform=="windows64") {
                            lib library: 'csv', linkage: 'static'
                            lib library: 'sqlite', linkage: 'static'
                            lib library: 'wsock', linkage: 'shared'
                        } else {
                            lib library: 'csv', linkage: 'shared'
                            lib library: 'sqlite', linkage: 'shared'
                        }
						lib library: 'curl', linkage: 'shared'
                        lib library: 'zip', linkage: 'shared'
                    }
                }
            }
        }
    }
}

project(":symmetric-client-clib-test") {
    apply plugin: 'c'
    model {
		components {
	    	test(NativeExecutableSpec) {
                targetPlatform target_platform
                sources {
		    		c {
						source {
						    srcDir "src"
			  				include "**/*.c"
						}
						exportedHeaders {
			    			srcDir "inc"
						}
						lib project: ':symmetric-client-clib', library: 'sym'
                        if (target_platform=="windows32" || target_platform=="windows64") {
                            lib library: 'csv', linkage: 'static'
                            lib library: 'sqlite', linkage: 'static'
                            lib library: 'cunit', linkage: 'static'
                            lib library: 'wsock', linkage: 'shared'
                        } else {
                            lib library: 'csv', linkage: 'shared'
                            lib library: 'sqlite', linkage: 'shared'
                            lib library: 'cunit', linkage: 'shared'
                        }
                        lib library: 'curl', linkage: 'shared'
                        lib library: 'zip', linkage: 'shared'
		    		}
				}
	   		}
		}
    }
}

project(":symmetric-client-native") {
    apply plugin: 'c'
    model {
		components {
	    	sym(NativeExecutableSpec) {
                targetPlatform target_platform
                sources {
		    		c {
						source {
			    			srcDir "src"
			    			include "**/*.c"
						}
						exportedHeaders {
			    			srcDir "inc"
						}
						lib project: ':symmetric-client-clib', library: 'sym'
                        if (target_platform=="windows32" || target_platform=="windows64") {
                            lib library: 'csv', linkage: 'static'
                            lib library: 'sqlite', linkage: 'static'
                            lib library: 'wsock', linkage: 'shared'
                        } else {
                            lib library: 'csv', linkage: 'shared'
                            lib library: 'sqlite', linkage: 'shared'
                        }
                        lib library: 'curl', linkage: 'shared'
                        lib library: 'zip', linkage: 'shared'
		    		}
				}
	    	}
		}
    }
}
 
//-----RELOCATE-----//
task clean_bin(type: Delete) {
    delete "build/bin"
}

task relocate_lib(type: Copy) {
    mustRunAfter clean_bin
    from(file("../symmetric-client-clib/build/libs/sym/shared"))
    into("build/bin")
}

task relocate_test(type: Copy) {
    mustRunAfter clean_bin
    from(file("../symmetric-client-clib-test/build/exe/test"))
    into("build/bin")
}

task relocate_sym(type: Copy) {
    mustRunAfter clean_bin
    from(file("../symmetric-client-native/build/exe/sym"))
    into("build/bin")
}

task relocate {
    description ('Copies files from default build location to \'bin\'.')
    dependsOn clean_bin
    dependsOn relocate_lib
    dependsOn relocate_test
    dependsOn relocate_sym
}

//-----SCP/UPLOAD TO BUILD SERVER-----//
task scp {
    description ('Secure copies built libraries and executables to build server.')
    def private_key
    def lib_name
    def test_name
    def sym_name
    if (target_platform=="windows32" || target_platform=="windows64") {
        private_key = "C:/Users/Administrator/.ssh/id_rsa"
        lib_name = "sym.dll"
        test_name = "test.exe"
        sym_name = "sym.exe"
    } else if (target_platform=="osx32" || target_platform=="osx64") {
        private_key = "/home/jumpmind/.ssh/id_rsa"
        lib_name = "libsym.dylib"
        test_name = "test"
        sym_name = "sym"
    } else {
        private_key = "/home/jenkins/id_rsa_s"
        lib_name = "libsym.so"
        test_name = "test"
        sym_name = "sym"
    }
    doLast {
        ant.scp(
            file: file("../symmetric-client-clib/build/libs/sym/shared/release/${lib_name}"),
            todir: "jumpmind@raven.loc:/home/jumpmind/clib/${target_platform}/release",
            keyfile: file(private_key),
            trust: true
        )
        ant.scp(
            file: file("../symmetric-client-native/build/exe/sym/release/${sym_name}"),
            todir: "jumpmind@raven.loc:/home/jumpmind/clib/${target_platform}/release",
            keyfile: file(private_key),
            trust: true
        )
        ant.scp(
            file: file("../symmetric-client-clib/build/libs/sym/shared/debug/${lib_name}"),
            todir: "jumpmind@raven.loc:/home/jumpmind/clib/${target_platform}/debug",
            keyfile: file(private_key),
            trust: true
        )
        ant.scp(
            file: file("../symmetric-client-clib-test/build/exe/test/debug/${test_name}"),
            todir: "jumpmind@raven.loc:/home/jumpmind/clib/${target_platform}/debug",
            keyfile: file(private_key),
            trust: true
        )
        ant.scp(
            file: file("../symmetric-client-native/build/exe/sym/debug/${sym_name}"),
            todir: "jumpmind@raven.loc:/home/jumpmind/clib/${target_platform}/debug",
            keyfile: file(private_key),
            trust: true
        )
    }
}

//-----CUNIT TEST EXECUTION-----//
task testLib(type: Exec) {
    description('Runs CUnit tests on built libraries')
    dependsOn relocate
    workingDir "./bin/debug"
    if (target_platform=="windows32" || target_platform=="windows64") {
        commandLine 'cmd', '/c', 'start', 'test.exe'
    } else if (target_platform=="osx32" || target_platform=="osx64") {
        commandLine './test'
    } else {
        commandLine '/bin/sh', '-c', 'LD_LIBRARY_PATH=. ./test'
    }
}

//-----UPLOAD ZIP-----//
task zip(type: Zip) {
    apply plugin: 'java'
    dependsOn relocate
    baseName 'symmetric-native'
    classifier target_platform
    from ('build/bin')
    include '**/**'
    destinationDir file('zip')
}

task publishSymmetric {
    dependsOn zip
    doLast {
        println "Publishing ${target_platform} native distribution to source forge"
        ant.scp(
                todir: "$sourceforgeUser:$sourceforgePassword@frs.sourceforge.net:/home/frs/project/symmetricds/symmetricds/symmetricds-$majorMinorVersion",
                trust: 'true',
                verbose: 'true') {
            fileset(dir: "zip") {
                include(name: 'symmetric-native-' + version+'-'+target_platform + '.zip')
            }
        }
    }
}

task releaseSymmetric {
    dependsOn publishSymmetric
    //dependsOn publishDoc
}


